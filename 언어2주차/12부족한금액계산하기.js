//새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 
//이 놀이기구의 원래 이용료는 price원 인데, 
//놀이기구를 N 번 째 이용한다면 원래 이용료의 N배를 받기로 하였습니다. 
// 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.
// 놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 

// return 하도록 solution 함수를 완성하세요.
// 단, 금액이 부족하지 않으면 0을 return 하세요.

// price : 놀이기구 이용료
// money : 가지고 있는 돈
// count : 놀이기구 이용료 x n배 

// 1회차 이용 : 3원(price)
// 2회차 이용 : 6원(price) // 9원
// 3회차 이용 : 9원(price) // 18원
// 4회차 이용 : 12원(price) // 30원 // 10원부족
// return 부족하지 않으면 0원
// return 10원 -> 부족한 금액 


// meraru04
function solution(price, money, count) {
    
    for(let i = 1; i <= count; i++){
        money -= price * i;
    }

    return money >= 0 ? 0 : Math.abs(money);

}

//hyunjoo
function solution(price, money, count) {
    let total = 0;

    for(let i=1;i<=count;i++){
        total += price * i;
    }
    return money > total ? 0: total-money
}

// 조건이 1개일 때 
// 조건 && 참 

// 조건이 2개일 때 
// 조건 
//   ? 참 
//   : 거짓

// 조건이 3개일 때 
// 조건1 
//   ? 첫번째 조건을 충족하는 친구 
//   : 첫번째 조건을 충족하지 못하지만, 조건2
//     ? 첫번째 조건을 충족하지 못하지만, 조건2을 충족하는 친구
//     : 첫번째 조건을 충족하지 못하지만, 조건2을 충족하지 못하는 친구 

// 수학풀이
// 산술 시리즈의 합에 대한 공식에서 파생 // 등차수열의 합
function solution(price, money, count) {
    // (4 * 5) * 3 / 2
  const totalCost = (count * (count + 1) * price) / 2;
  return totalCost > money ? totalCost - money : 0;
}

// 1,2,3,4,5 의 순서대로 나열된 수자의 합 ? 
// a에서 b까지

// (a+b) * 
// (Math.abs(b-a)+1)
// /2

//등차수열 첫째항이 1이면 1,3,5,7,9
//10,15,20,25,30 첫째항이 10, 5씩 더해지는 형태로
// 3, 6, 9, 12 
// (count * (count + 1) * price) ?? 왜 되는거지... 

//등차수열의 합을 구할 때는 첫항과 마지막항을 더해서 항수를 곱하고 2로 나눈다.
//(마지막항 + 공차(이웃한 두 항의 변화량)) * 항의 개수 / 2
//예시:1~10  =(10 + 1) * 10 / 2 = 55

// (10 + 30) * 5 / 2 = 100

// (1 + count) * count * price
// // 첫 항 // 마지막 
// [ 1, 2, 3, 4 ] = [ 3, 6, 9, 12]

// a. 수열의 첫번째 숫자와 마지막 숫자를 더하고   5 (첫항 + 마지막항)
// b. 수열의 요소의 개수 곱하기               4 (요소의 개수)
// a*b 하고 나누면 끝                      /2

// 수열의 숫자와 사이값만 주어졌을 때 
// a는 수열에 1을 더하고
// b는 수열
// (a*b)* 사이값을 곱하고
// 나누이 /2 